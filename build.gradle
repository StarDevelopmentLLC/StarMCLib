import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.2.2'
}

group = 'com.stardevllc'
version = '0.8.1'

publishing {
    repositories {
        maven {
            name="stardev"
            url="https://repo.stardevllc.com/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    
    publications {
        maven(MavenPublication) {
            from components.shadow

            artifact ("build/libs/${project.name}-${project.version}-javadoc.jar") {
                classifier = "javadoc"
            }

            artifact ("build/libs/${project.name}-${project.version}-sources.jar") {
                classifier = "sources"
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://repo.stardevllc.com/releases'
    }
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url = 'https://repo.codemc.org/repository/maven-public/'
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:${spigotVersion}"
    implementation "com.stardevllc:StarLib:${starlibVersion}"
    implementation "com.stardevllc:SMCVersion:${smcvVersion}"
    implementation "com.stardevllc:SMaterial:${smaterialVersion}"
    implementation "com.stardevllc:config:${configVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "net.kyori:adventure-api:${adventureVersion}"
    implementation "net.kyori:adventure-platform-bukkit:${adventureBukkitVersion}"
    implementation "net.kyori:adventure-text-minimessage:${miniMessageVersion}"
    implementation project(':common')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withJavadocJar()
    withSourcesJar()
}

tasks.named('shadowJar', ShadowJar) {
    archiveClassifier = ''

    dependencies {
        exclude(dependency("org.jetbrains:annotations:.*"))
        exclude(dependency("com.google.errorprone:error_prone_annotations:.*"))
    }

    relocate('net.kyori', 'com.stardevllc.kyori')
    relocate('com.google.gson', 'com.stardevllc.gson')
}

tasks.named("javadoc", Javadoc) {
    subprojects { subproject ->
        source += subproject.sourceSets.main.allJava
    }
//    source += project.sourceSets.main.allJava

    subprojects { subproject ->
        classpath += subproject.sourceSets.main.compileClasspath
        classpath += subproject.sourceSets.main.runtimeClasspath
    }

//    classpath += project.sourceSets.main.compileClasspath
}

tasks.named('sourcesJar', Jar) {
    archiveClassifier.set("sources")
//    from sourceSets.main.allSource

    subprojects { subproject ->
        from subproject.sourceSets.main.allSource
    }
}

tasks.compileJava.dependsOn(clean)
tasks.jar.finalizedBy(shadowJar)
tasks.build.finalizedBy(publishToMavenLocal)

tasks.withType(PublishToMavenLocal).configureEach {
    dependsOn(shadowJar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
}

tasks.withType(PublishToMavenRepository).configureEach {
    dependsOn(shadowJar)
    dependsOn(javadocJar)
    dependsOn(sourcesJar)
}